{"version":3,"sources":["Components/Login.js","Components/Planner/WorkerTicket.js","Components/Planner/WorkersBox.js","Components/Planner/Post.js","Components/Planner/Day.js","Components/Planner/Planner.js","Components/Personal/Personal.js","Components/History/Gistory.js","Components/SetPlan/SetPlan.js","App.js","serviceWorker.js","index.js"],"names":["Login","to","Component","WorkerTicket","drag","ev","console","log","props","workerDB3","i1","dataTransfer","setData","id","this","className","style","borderColor","color","draggable","onDragStart","name","WorkersBox","workerDB2","map","e","i","key","Post","allowDrop","preventDefault","drop","target","src","getData","dayInd2","postInd1","pageX","shiftSet3","shifts","onDragOver","onDrop","Day","shiftSet2","dayInd1","postInd","Planner","workerDB1","shiftSet1","dayInd","Presonal","History","SetPlan","App","state","shiftSet","shiftsDB","workerDB","exact","path","component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.fc5894cc.chunk.js","sourcesContent":["import React, { Component } from 'react'\r\nimport { Link } from 'react-router-dom'\r\n\r\nexport default class Login extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Login\r\n\r\n                <div>\r\n                    <Link to='/planner'>\r\n                        <button>log in</button>\r\n                    </Link>\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class WorkerTicket extends Component {\r\n\r\n    drag = (ev) => {\r\n\r\n        console.log(this.props.workerDB3[this.props.i1])\r\n\r\n        //getting the index from the workerDV\r\n        ev.dataTransfer.setData(\"src\", this.props.workerDB3[this.props.i1].id);\r\n    \r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div id={`ticket${this.props.i1}`}\r\n                className='ticketDiv'\r\n                style={{ borderColor: `${this.props.workerDB3[this.props.i1].color}`}}\r\n                draggable='true'\r\n                onDragStart={this.drag}\r\n                >\r\n                    \r\n\r\n                {this.props.workerDB3[this.props.i1].name}\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport WorkerTicket from './WorkerTicket'\r\n\r\nexport default class WorkersBox extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                {this.props.workerDB2.map((e,i)=>{\r\n                    return (\r\n                        <WorkerTicket\r\n                        key={i} \r\n                        workerDB3={this.props.workerDB2}\r\n                        i1={i}\r\n                        />\r\n                    )\r\n                })}\r\n                \r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Post extends Component {\r\n\r\n    allowDrop = (ev) => {\r\n\r\n        ev.preventDefault();\r\n        //console.log(ev.target);\r\n        //console.log(ev.pageX);\r\n\r\n\r\n    }\r\n\r\n    drop = (ev) => {\r\n\r\n        ev.preventDefault();\r\n\r\n        console.log(ev.target);\r\n\r\n        let src = ev.dataTransfer.getData(\"src\");\r\n\r\n        console.log('src ' + src);\r\n\r\n        console.log('day ' + this.props.dayInd2);\r\n\r\n        console.log('post ' + this.props.postInd1);\r\n\r\n        console.log('x ' + ev.pageX);\r\n\r\n\r\n\r\n\r\n    }\r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div className='postBodyDiv'>\r\n\r\n                    <div>{this.props.shiftSet3[this.props.dayInd2].shifts[this.props.postInd1].name}</div>\r\n\r\n                    <div className='dropAreaDiv'\r\n                        onDragOver={this.allowDrop}\r\n                        onDrop={this.drop}\r\n                    ></div>\r\n\r\n                </div>\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport Post from './Post'\r\n\r\nexport default class Day extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div className='dayBodyDiv'>\r\n\r\n                    <div className='dayNameDiv'>\r\n                        {this.props.shiftSet2[this.props.dayInd1].name}\r\n                    </div>\r\n\r\n                    <div>\r\n                        {this.props.shiftSet2[this.props.dayInd1].shifts.map((e, postInd) => {\r\n                            return (\r\n                                <Post\r\n                                    key={postInd}\r\n                                    shiftSet3={this.props.shiftSet2}\r\n                                    postInd1={postInd}\r\n                                    dayInd2={this.props.dayInd1}\r\n\r\n                                />\r\n                            )\r\n                        })}\r\n                    </div>\r\n\r\n                </div>\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\nimport WorkersBox from './WorkersBox'\r\nimport Day from './Day';\r\n\r\nexport default class Planner extends Component {\r\n\r\n\r\n    \r\n\r\n\r\n    render() {\r\n        return (\r\n            <div>\r\n\r\n                <div id='plnWrkBox'>\r\n\r\n\r\n\r\n\r\n                    <div>\r\n                        <WorkersBox\r\n                            workerDB2={this.props.workerDB1}\r\n                        />\r\n                    </div>\r\n\r\n                    <div id='plannerDiv'\r\n                       \r\n\r\n                    >\r\n                        {this.props.shiftSet1.map((e, dayInd) => {\r\n                            return (\r\n                                <Day\r\n                                    key={dayInd}\r\n                                    shiftSet2={this.props.shiftSet1}\r\n                                    dayInd1={dayInd}\r\n                                />\r\n                            )\r\n                        })}\r\n\r\n                    </div>\r\n\r\n\r\n                </div>\r\n\r\n\r\n\r\n\r\n\r\n\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class Presonal extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                Presonal\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class History extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                History\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\r\n\r\nexport default class SetPlan extends Component {\r\n    render() {\r\n        return (\r\n            <div>\r\n                SetPlan\r\n            </div>\r\n        )\r\n    }\r\n}\r\n","import React, { Component } from 'react'\nimport { HashRouter as Router, Switch, Route} from 'react-router-dom'\nimport './App.css';\nimport Login from './Components/Login.js'\nimport Planner from './Components/Planner/Planner.js'\nimport Personal from './Components/Personal/Personal.js'\nimport Gistory from './Components/History/Gistory.js'\nimport SetPlan from './Components/SetPlan/SetPlan.js'\n\nexport default class App extends Component {\n  constructor(props) {\n    super(props)\n\n    this.state = {\n\n      shiftSet: [\n        {name: 'Su', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]}, \n        {name: 'Mo', shifts: [{name: 'post6'},{name: 'post7'},{name: 'post8'}]}, \n        {name: 'Tu', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]}, \n        {name: 'We', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]}, \n        {name: 'Th', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]},\n        {name: 'Fr', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]},\n        {name: 'Sa', shifts: [{name: 'post1'},{name: 'post2'},{name: 'post3'}]},\n      ],\n\n      shiftsDB: [],\n\n      workerDB: [\n        { id: 0, name: 'Amir', color: '#ff0000' },\n        { id: 1, name: 'Nadav', color: '#00aa00' },\n        { id: 2, name: 'David', color: '#0000ff' },\n      ],\n\n    }\n  }\n\n\n\n\n  render() {\n    return (\n      <div>\n\n        weekly planner\n\n        <Router>\n\n          <Switch>\n\n            <Route exact path='/' component={() => {\n              return <Login\n\n              />\n            }} />\n            <Route exact path='/planner' component={() => {\n              return <Planner\n                workerDB1={this.state.workerDB}\n                shiftSet1={this.state.shiftSet}\n              />\n            }} />\n            <Route exact path='/personal' component={() => {\n              return <Personal\n\n              />\n            }} />\n            <Route exact path='/history' component={() => {\n              return <Gistory\n\n              />\n            }} />\n            <Route exact path='/setplanner' component={() => {\n              return <SetPlan\n\n              />\n            }} />\n\n\n          </Switch>\n\n        </Router>\n\n      </div>\n    )\n  }\n}\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}